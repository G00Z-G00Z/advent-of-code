rust:
  init_commands:
    - cargo init --vcs none --lib -q

  files:
    - name: .env.example
      content: |
         DEMO_MODE=0
    - name: .env
      content: |
         DEMO_MODE=1
    - input.txt
    - demo-input.txt
    - name: src/lib.rs
      content: |
        #![allow(dead_code, non_snake_case)]
        #[cfg(test)]
        mod tests {
            use utility_2022::{get_input, is_demo_mode};
            use super::*;

            pub mod part1 {

                use super::*;

                #[test]
                fn test_demo_input() {
                    if !is_demo_mode() {
                        return;
                    }

                    let input = get_input();

                    assert_eq!(input, "hey");
                }

                #[test]
                fn test_input() {
                    if is_demo_mode() {
                        return;
                    }

                    let input = get_input();

                    println!("Answer pt1: {}", input);
                }
            }

            pub mod part2 {

                use super::*;

                #[test]
                fn test_demo_input() {
                    if !is_demo_mode() {
                        return;
                    }

                    let input = get_input();

                    assert_eq!(input, "hey");
                }

                #[test]
                fn test_input() {
                    if is_demo_mode() {
                        return;
                    }

                    let input = get_input();

                    println!("Answer pt2: {}", input);
                }
            }
        }

c:
  commands:
    - chmod +x run-build.sh
  files:
    - input.txt
    - demo-input.txt
    - name: main.c
      content: |
        #include <stdio.h>

        int main() {
          // Hello world
          printf("Hello world!\n");
          return 0;
        }

    - name: run-build.sh
      content: |
        #!/bin/bash

        gcc -o main main.c 
        ./main





python:
  commnads:
    - pip install -r requirements.txt
    - chmod +x run.sh
  files:
    - name: requirements.txt
      content: |
              python-dotenv
    - name: .env
      content: |
        DEMO_APP=1
    - input.txt
    - demo-input.txt
    - name: run.sh
      content: |

    - name: main.py
      content: |
          import dotenv
          import os
          from pathlib import Path

          dotenv.load_dotenv()

          is_debug = True if os.environ.get("DEMO_APP", "1") else False
          FILE_PATH = Path("./demo-input.txt") if is_debug else Path("./input.txt")


          def read_file(file_path: str) -> str:
              with open(file_path, "r") as f:
                  return f.read()


          def main():
              content = read_file(str(FILE_PATH))
              print(content)


          if __name__ == "__main__":
              main()
              pass

          
